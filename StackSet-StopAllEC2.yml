---
AWSTemplateFormatVersion: '2010-09-09'
Description: Stop all ec2 instance at specified time.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "AWS Lambda parameters"
        Parameters:
          - LambdaTimeout
          - LambdaSourceS3Bucket
          - LambdaFunctionZipName
Parameters:
  LambdaTimeout:
    Type: Number
    Default: '120'
    Description: Enter a timeout value in seconds for the lambda function. Min is 3, max is 300 and default is 120.
  LambdaMemory:
    Type: Number
    Default: '128'
    Description: Enter the amount of memory alocated for the lambda function. Default is 128.

Resources:
  EventsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Events rule for stop all EC2 at given time.
      ScheduleExpression: cron(0 22 * * ? *)
      Name:
        Fn::Sub: "${AWS::Region}-EC2StopRule"
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - EC2StopLambda
          - Arn
        Id:
          Ref: AWS::StackName
  EC2StopLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3


          #Main function

          def lambda_handler(event, context):

              ec2client = boto3.client('ec2')
              #Get all spot requests
              spot_response = ec2client.describe_spot_instance_requests()

              #List of spot request ids
              spot_requests_to_cancel = []
              for request in spot_response['SpotInstanceRequests']:
                spot_requests_to_cancel.append(request['SpotInstanceRequestId'])

              #Cancelling spot requests
              if (len(spot_requests_to_cancel)) > 0:
                ec2client.cancel_spot_instance_requests(SpotInstanceRequestIds=spot_requests_to_cancel)

              #Get all EC2 instances
              response = ec2client.describe_instances()
              #List of spot instances that must be terminated instead of stopped
              instances_to_terminate = []

              for reservation in response["Reservations"]:
                for instance in reservation["Instances"]:
                  instance_id = instance['InstanceId']
                  #List of instances to stop
                  instances_to_stop = []
                  instances_to_stop.append(instance_id)
                  try:
                    ec2client.stop_instances(InstanceIds=instances_to_stop)
                  except Exception as error:
                    if error.message.find('is a spot instance'):
                      instances_to_terminate.append(instance_id)

              if len(instances_to_terminate) > 0:
                ec2client.terminate_instances(InstanceIds=instances_to_terminate)

      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
        - EC2Stop
        - Arn
      Runtime: python2.7
      Timeout:
        Ref: LambdaTimeout
      MemorySize:
        Ref: LambdaMemory
  EC2Stop:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      RoleName:
        Fn::Sub: "${AWS::Region}-StopEC2"
  EC2StopPol:
    Type: AWS::IAM::Policy
    DependsOn: EC2Stop
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: LogStreamAccess
          Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - arn:aws:logs:*:*:*
        - Sid: EC2StopStartAllow
          Effect: Allow
          Action:
          - ec2:Stop*
          - ec2:DescribeInstances*
          Resource:
          - "*"
      PolicyName:
        Fn::Sub: "${AWS::Region}-StopEc2"
      Roles:
      - Ref: EC2Stop
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: EC2StopLambda
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - EventsRule
        - Arn
#Outputs:
