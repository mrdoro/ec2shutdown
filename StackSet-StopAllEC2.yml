---
AWSTemplateFormatVersion: '2010-09-09'
Description: Stop all ec2 instance at specified time. Implement over CloudFormation and StackSets.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "AWS Lambda parameters"
        Parameters:
          - LambdaTimeout
          - LambdaMemory
          - SdTimer

Parameters:
  LambdaTimeout:
    Type: Number
    Default: '120'
    Description: Enter a timeout value in seconds for the lambda function. Min is 3, max is 300 and default is 120.
  LambdaMemory:
    Type: Number
    Default: '128'
    Description: Enter the amount of memory alocated for the lambda function. Default is 128.
  SdTimer:
    Type: String
    Default: cron(0 22 * * ? *)
    Description: Enter a shutdown time in cron format.

Resources:
  EventsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Events rule for stop all EC2 at given time.
      ScheduleExpression: !Ref SdTimer
      Name:
        Fn::Sub: "${AWS::StackName}-EC2StopRule"
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - EC2StopLambda
          - Arn
        Id:
          Ref: AWS::StackName
  EC2StopLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3


          #Main function

          def lambda_handler(event, context):

              ec2 = boto3.resource('ec2')
              instancelist= []

              #List all running instances
              instances = ec2.instances.filter(
                  Filters=[{'Name': 'instance-state-name', 'Values': ['running']}])
              #Seperate all instance.id of running instances
              for instance in instances:
                  instancelist.append(instance.id)

          #Stop All runnint instances
              ec2.instances.filter(InstanceIds=instancelist).stop()

      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
        - MGMTEC2StopRole
        - Arn
      Runtime: python2.7
      Timeout:
        Ref: LambdaTimeout
      MemorySize:
        Ref: LambdaMemory
  MGMTEC2StopRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      RoleName:
        Fn::Sub: "${AWS::StackName}-MGMTEC2StopPol"
  MGMTEC2StopPol:
    Type: AWS::IAM::Policy
    DependsOn: MGMTEC2StopRole
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: LogStreamAccess
          Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - arn:aws:logs:*:*:*
        - Sid: EC2StopStartAllow
          Effect: Allow
          Action:
          - ec2:Stop*
          - ec2:DescribeInstances*
          Resource:
          - "*"
      PolicyName:
        Fn::Sub: "${AWS::StackName}-MGMTEC2StopPol"
      Roles:
      - Ref: MGMTEC2StopRole
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: EC2StopLambda
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - EventsRule
        - Arn
Outputs:
  EventsRule:
    Value:
      Ref: EventsRule
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-EC2StopMonitorRule"
    Description: Event Rule ID.
  LambdaFuncName:
    Value:
      Ref: EC2StopLambda
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-EC2StopMonitorLambda"
    Description: Lambda function logical ID.
